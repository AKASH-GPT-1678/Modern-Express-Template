
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  googlemail    String?
  extra         String?
  contact       BigInt?        @default(99999)
  lastname      String?
  password      String?
  projects      Project[]
  team          Team[]
  Listing       Listing[]
  Selleraccount SellerAccount?
  Dealer        Dealers[]
  JobProfle     JobProfile?

  Review       Review[]
  WishList     WishList[]
  Member       Member[]
  ProductQuery ProductQuery[]
}

model JobProfile {
  id           String    @id @default(cuid())
  User         User      @relation(fields: [id], references: [id])
  rating       Int?
  jobsapplied  String[]
  lastdisabled DateTime?
  createdAt    DateTime  @default(now())
  workdone     Int?
  status       Boolean
  location     String?

  @@index([id])
}

model Dealers {
  id               String   @id @default(cuid())
  idd              String?
  name             String?
  dealeremail      String?
  dealerid         String?
  Users            User?    @relation(fields: [dealerid], references: [id])
  email            String?
  phonenum         String?
  verified         Boolean?
  address          String?
  category         String?
  transactionWorth Int?
  createdAt        DateTime @default(now())

  @@index([dealerid])
}

enum OrderStatus {
  Pending
  Delivered
}

model Order {
  id           String         @id @default(cuid())
  orderStatus  OrderStatus?
  sellerid     String?
  seller       SellerAccount? @relation(fields: [sellerid], references: [id])
  product      Products[]
  buyerName    String
  buyerEmail   String
  buyerContact String?
  buyerId      String?
  orders       String?

  @@index([sellerid, buyerId])
}

enum Category {
  Event_Management
  Construction_Projects
  Software_Development
  Marketing_Campaigns
  Corporate_Projects
  Others
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String
  category    Category
  createdAt   DateTime   @default(now())
  userid      String
  coverimgUrl String?
  budget      Int?       @default(0)
  User        User       @relation(fields: [userid], references: [id])
  member      Member[]
  Task        Task[]
  finance     Finance?
  documents   Document[]

  ScheduledMsg ScheduleMsg[]
  Inventory    Inventory[]
}

model Member {
  id        String  @id @default(cuid())
  userid    String?
  projectId String
  Project   Project @relation(fields: [projectId], references: [id])
  name      String?
  useremail String
  User      User    @relation(fields: [useremail], references: [email])

  @@index([projectId])
}

model Inventory {
  id            String   @id @default(cuid())
  available     Boolean?
  name          String
  description   String?
  createdAt     DateTime @default(now())
  value         BigInt
  stock         String?
  valueperpeice String?
  projectId     String
  Project       Project  @relation(fields: [projectId], references: [id])
}

model Team {
  id       Int     @id @default(autoincrement())
  email    String
  name     String
  verified Boolean
  phonenum Int
  useriid  String?
  User     User?   @relation(fields: [useriid], references: [id])

  createdat DateTime @default(now())
}

model Listing {
  id          String  @id @default(cuid())
  image       String
  rating      Float
  address     String
  soldout     Boolean
  description String?
  ownerId     String?
  owner       User?   @relation(fields: [ownerId], references: [id])
}

model Task {
  id          String   @id @default(cuid())
  task        String
  team        String[]
  amount      Int?
  startdate   String
  deadline    String
  description String
  supplier    String[]
  subtasks    String[]
  inventories String[]
  teamlead    String?
  priority    String?
  status      Boolean?
  projectId   String?
  Project     Project? @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())

  @@index([projectId])
}

enum Typetrans {
  Debit
  Credit
}

enum Status {
  Success
  Pending
}

model Transaction {
  id        String    @id @default(cuid())
  amount    Int
  gstrate   Int?      @default(0)
  dealer    String
  status    Status?
  proof     String?
  type      Typetrans
  createdAt DateTime  @default(now())
  financeId String
  finance   Finance   @relation(fields: [financeId], references: [id])

  @@index([financeId])
}

model Finance {
  id String @id @default(cuid())

  transaction Transaction[]
  income      Int?          @default(0)
  expenditure Int?          @default(0)
  budget      Int?          @default(0)
  balance     Int?          @default(0)
  MPIN        String?
  finance     Project?      @relation(fields: [id], references: [id])
  notes       Note[]
  remainder   Remainders[]
}

model Remainders {
  id        String   @id @default(cuid())
  amount    Int
  dealer    String
  date      DateTime @default(now())
  financeId String
  finance   Finance  @relation(fields: [financeId], references: [id])
}

enum NoteType {
  Finance
  Legal
}

model Note {
  id        String    @id @default(cuid())
  title     String?
  content   String
  createdAt DateTime  @default(now())
  finance   Finance   @relation(fields: [financeId], references: [id])
  financeId String
  type      NoteType?
}

enum Msgtype {
  Email
  Whatsapp
}

enum ScheduleMsgStatus {
  Pending
  Delivered
}

model ScheduleMsg {
  id        String             @id @default(cuid())
  email     String?
  phonenum  String?
  Datetime  String?
  type      Msgtype?
  text      String?
  status    ScheduleMsgStatus?
  createdAt DateTime           @default(now())
  projectId String
  project   Project            @relation(fields: [projectId], references: [id])
}

model SellerAccount {
  id String @id

  User    User?      @relation(fields: [id], references: [id])
  sales   String?
  Product Products[]
  Order   Order[]
}

enum Categories {
  Basic_Electricals
  Construction_Essentials
  Party_Essentials
  Food_Essentials
  Pharma_Essentials
  Apparels_Clothing_and_Garments
  Electrical_Goods_and_Supplies
  Hospital_and_Medical_Equipment
  Industrial_Plants_Machinery_and_Equipment
  Food_Event_Services
  Beauty_Wellness
  Home_Services
  Local_Services
  Errands_Delivery
  Miscellaneous_Services
  Consultancy
  //   "Food & Event Services",
  // "Beauty & Wellness",
  // "Home Services",
  // "Local Services",
  // "Errands & Delivery",
  // "Miscellaneous Services"
}

enum Mode {
  Home_Delivery
  Offline
  Call
}

enum Type {
  Product
  Service
}

model Products {
  id          String         @id @default(cuid())
  name        String
  price       String?
  description String?
  rating      String?
  imageurl    String?
  quantity    String?
  sellerName  String
  expirydate  String?
  category    Categories
  specialmsg  String?
  stock       String?
  contact     String?
  questions   String[]
  mode        Mode?
  type        Type
  offers      String?
  Review      Review[]
  sellerid    String
  Seller      SellerAccount  @relation(fields: [sellerid], references: [id])
  order       Order[]
  WishList    WishList[]
  Queries     ProductQuery[]

  @@index([sellerid])
}

model ProductQuery {
  id               Int       @id @default(autoincrement())
  username         String?
  userid           String
  name             String?
  contact          String?
  additionalQueies String?
  question         String[]
  answers          String[]
  User             User      @relation(fields: [userid], references: [id])
  Product          Products? @relation(fields: [productId], references: [id])
  productId        String?

  @@index([productId, userid])
}

model WishList {
  id        String    @id @default(cuid())
  userid    String?
  productid String?
  User      User?     @relation(fields: [userid], references: [id])
  Product   Products? @relation(fields: [productid], references: [id])

  @@index([userid, productid])
}

model Review {
  id        String  @id @default(cuid())
  rating    Float?
  review    String?
  userid    String?
  username  String?
  productId String?
  User      User?   @relation(fields: [userid], references: [id])

  Product Products? @relation(fields: [productId], references: [id])
}

model Document {
  id           String   @id @default(cuid())
  userId       String?
  originalName String?
  title        String
  storageUrl   String?
  uploadDate   DateTime @default(now())
  isEncrypted  Boolean  @default(true)
  notes        String?
  projectId    String
  Project      Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}


model Test {
  id        String   @id @default(cuid())
  test1     String
  test2     String
  test3     String

}
